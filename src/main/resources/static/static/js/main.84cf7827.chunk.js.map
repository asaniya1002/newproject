{"version":3,"sources":["components/Project/CreateProjectButton.js","actions/projectActions.js","actions/types.js","components/Project/ProjectItem.js","components/Dashboard.js","securityUtils/setJWTToken.js","actions/securityActions.js","components/Layout/Header.js","components/Project/AddProject.js","reducers/backlogReducer.js","reducers/errorReducer.js","reducers/projectReducer.js","reducers/securityReducer.js","reducers/index.js","store.js","components/Project/UpdateProject.js","components/ProjectBoard/ProjectTasks/ProjectTask.js","actions/backlogActions.js","components/ProjectBoard/Backlog.js","components/ProjectBoard/ProjectBoard.js","components/ProjectBoard/ProjectTasks/AddProjectTask.js","components/ProjectBoard/ProjectTasks/UpdateProjectTask.js","components/Layout/Landing.js","components/UserManagement/Register.js","components/UserManagement/Login.js","securityUtils/SecureRoute.js","App.js","reportWebVitals.js","index.js"],"names":["CreateProjectButton","Fragment","Link","to","className","style","backgroundColor","color","border","borderStyle","createProject","project","history","dispatch","a","axios","post","push","type","payload","response","data","ProjectItem","onDeleteClick","id","props","deleteProject","this","fontFamily","fontWeight","projectIdentifier","projectName","description","onClick","bind","Component","connect","window","confirm","delete","Dashboard","getProjects","projects","map","key","state","get","res","setJWTToken","token","defaults","headers","common","logout","localStorage","removeItem","Header","location","href","headerLinks","security","validToken","user","userIsAuthenticated","fullName","userIsNotAuthenticated","data-toggle","data-target","AddProject","startDate","endDate","errors","onChange","onSubmit","nextProps","setState","e","target","name","value","preventDefault","newProject","classnames","placeholder","intialState","project_tasks","project_task","initialState","booleanActionPayload","combineReducers","action","filter","backlog","projectSequence","initalState","middleware","thunk","ReactReduxDevTools","__REDUX_DEVTOOLS_EXTENSION__","f","store","navigator","userAgent","includes","createStore","rootReducer","compose","applyMiddleware","UpdateProject","match","params","getProject","updateProject","disabled","ProjectTask","backlogId","ptId","deleteProjectTask","priorityString","priorityClass","priority","summary","acceptanceCriteria","Backlog","tasks","project_tasks_prop","todoItems","inProgressItems","doneItems","i","length","status","ProjectBoard","getBacklog","BoardContent","projectNotFound","role","boardAlgorithm","AddProjectTask","dueDate","newTask","addProjectTask","UpdateProjectTask","createdAt","getProjectTask","updatedProjectTask","updateProjectTask","patch","Landing","Register","username","password","confirmPassword","newUser","createNewUser","Login","LoginRequest","login","setItem","decoded","jwt_decode","component","otherProps","Route","render","Redirect","jwtToken","decoded_jwtToken","currentTime","Date","now","exp","App","exact","path","Switch","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.84cf7827.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n//function component\r\nconst CreateProjectButton = () => {\r\n  return (\r\n    <React.Fragment>\r\n      {\r\n        //React.Fragment: container like how div wraps up everything except its hidden/ignored\r\n      }\r\n      {\r\n        //Link is from react-router-dom and is an alternative to <a href=> tag in HTML\r\n      }\r\n      <Link\r\n        to=\"/addProject\"\r\n        className=\"btn btn-lg btn-info\"\r\n        style={{\r\n          backgroundColor: \"#dee2e6\",\r\n          color: \"#5a3d75\",\r\n          border: \"#5a3d75\",\r\n          borderStyle: \"solid\",\r\n        }}\r\n      >\r\n        Create Project\r\n      </Link>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default CreateProjectButton;\r\n","import axios from \"axios\"; //package which will be used to make HTTP requests to API endpoint..the library we're going to use to talk to backend\r\nimport { DELETE_PROJECT, GET_ERRORS, GET_PROJECT, GET_PROJECTS } from \"./types\";\r\n\r\n//Action - that which describes the changes in the state of the application\r\n//Reducer - that which actually carries out the state transition depending on the action\r\n\r\n//Synchronous actions: as soon as an action is dispatched, the state is immediately updated\r\n//Async actions - wait for/till a task to complete before dispatching action...typical ex: waiting fore response from API call\r\n//history in param is what allows to redirect once we submit the project\r\nexport const createProject = (project, history) => async (dispatch) => {\r\n  try {\r\n    await axios.post(\"/api/project\", project);\r\n    history.push(\"/dashboard\"); //send user back to dashboard\r\n    /*\r\n    The Redux store has a method called dispatch. \r\n    The only way to update the state is to call store.dispatch() and pass in an action object. \r\n\r\n    You can think of dispatching actions as \"triggering an event\" in the application. \r\n    Something happened, and we want the store to know about it. Reducers act like event listeners,\r\n     and when they hear an action they are interested in, they update the state in response.\r\n\r\n     State is Read-Only​\r\n    The only way to change the state is to dispatch an action, an object that describes what happened.\r\n    */\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      //payload is a conventional name\r\n      payload: {},\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: err.response.data,\r\n    });\r\n  }\r\n};\r\n\r\nexport const getProjects = () => async (dispatch) => {\r\n  const res = await axios.get(\"/api/project/all\");\r\n  dispatch({\r\n    //3...by the way...this is an object...our \"action\"\r\n    type: GET_PROJECTS,\r\n    payload: res.data,\r\n  });\r\n};\r\n\r\nexport const getProject = (id, history) => async (dispatch) => {\r\n  try {\r\n    const res = await axios.get(`/api/project/${id}`);\r\n    dispatch({\r\n      type: GET_PROJECT,\r\n      payload: res.data,\r\n    });\r\n  } catch (error) {\r\n    history.push(\"/dashboard\"); //just send user back to the dashboard if/when they try to update a project whose identifier does not exist (and point of access being the URL)\r\n  }\r\n};\r\n\r\nexport const deleteProject = (id) => async (dispatch) => {\r\n  if (\r\n    window.confirm(\r\n      \"Are you sure you would like to delete this project? This will permanently delete the entire project including all the data related to it!\"\r\n    )\r\n  ) {\r\n    await axios.delete(`/api/project/${id}`);\r\n    dispatch({\r\n      type: DELETE_PROJECT,\r\n      payload: id,\r\n    });\r\n  }\r\n};\r\n","export const GET_ERRORS = \"GET_ERRORS\";\r\nexport const GET_PROJECTS = \"GET_PROJECTS\";\r\nexport const GET_PROJECT = \"GET_PROJECT\";\r\nexport const DELETE_PROJECT = \"DELETE_PROJECT\";\r\n\r\n//Types for Backlog Actions\r\nexport const GET_BACKLOG = \"GET_BACKLOG\";\r\nexport const GET_PROJECT_TASK = \"GET_PROJECT_TASK\";\r\nexport const DELETE_PROJECT_TASK = \"DELETE_PROJECT_TASK\";\r\n\r\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { deleteProject } from \"../../actions/projectActions\";\r\nclass ProjectItem extends Component {\r\n  onDeleteClick = (id) => {\r\n    this.props.deleteProject(id);\r\n  };\r\n\r\n  render() {\r\n    const { project } = this.props; //extracting the variable project from the props so you dont have to keep referring to it as this.props.project\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"card card-body bg-light mb-3\">\r\n          <div className=\"row\">\r\n            <div className=\"col-2\">\r\n              <span\r\n                className=\"mx-auto\"\r\n                style={{\r\n                  fontFamily: \"Courier New\",\r\n                  fontWeight: \"bold\",\r\n                }}\r\n              >\r\n                {project.projectIdentifier}\r\n              </span>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-4 col-8\">\r\n              <h3\r\n                style={{\r\n                  fontFamily: \"Calibri\",\r\n                }}\r\n              >\r\n                {project.projectName}\r\n              </h3>\r\n              <p\r\n                style={{\r\n                  fontFamily: \"lucida handwriting\",\r\n                }}\r\n              >\r\n                {project.description}\r\n              </p>\r\n            </div>\r\n            <div className=\"col-md-4 d-none d-lg-block\">\r\n              <ul className=\"list-group\">\r\n                <Link to={`/projectBoard/${project.projectIdentifier}`}>\r\n                  <li className=\"list-group-item board\">\r\n                    <i className=\"fa fa-flag-checkered pr-1\"> Project Board </i>\r\n                  </li>\r\n                </Link>\r\n                <Link to={`/updateProject/${project.projectIdentifier}`}>\r\n                  <li className=\"list-group-item update\">\r\n                    <i className=\"fa fa-edit pr-1\"> Update Project</i>\r\n                  </li>\r\n                </Link>\r\n                <li\r\n                  className=\"list-group-item delete\"\r\n                  onClick={this.onDeleteClick.bind(\r\n                    this,\r\n                    project.projectIdentifier\r\n                  )}\r\n                >\r\n                  <i className=\"fa fa-minus-circle pr-1\"> Delete Project</i>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nProjectItem.propTypes = {\r\n  deleteProject: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(null, { deleteProject })(ProjectItem);\r\n","import React, { Component } from \"react\";\r\nimport CreateProjectButton from \"./Project/CreateProjectButton\";\r\nimport ProjectItem from \"./Project/ProjectItem\";\r\nimport { connect } from \"react-redux\";\r\nimport { getProjects } from \"../actions/projectActions\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Dashboard extends Component {\r\n  componentDidMount() {\r\n    this.props.getProjects();\r\n  }\r\n\r\n  render() {\r\n    //\r\n    //extracting projects property from the props.project object...technique of destructuring\r\n    //so now you can just use projects to refer to it instead of this.props.projects\r\n    //for example...const {name, heroName} = this.props where name and heroName were passed in as attributes\r\n    //we are simply extracting the necessary props...your props object could contain 10 diff props but\r\n    //you can destructure only the ones you want\r\n    //so now you wont have to refer to them in the render() as this.props.hero...rather just hero\r\n    const { projects } = this.props.project; //destructuring from props only those that i need //gets us this.props.project.projects\r\n    return (\r\n      <div className=\"projects\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-12\">\r\n              <h1\r\n                className=\"display-4 text-center\"\r\n                style={{\r\n                  fontFamily: \"papyrus\",\r\n                }}\r\n              >\r\n                Projects\r\n              </h1>\r\n              <br />\r\n              <CreateProjectButton />\r\n              <br />\r\n              <hr />\r\n              {/* WIthout the key, you will receive a warning that there is no\r\n              \"key\" provided for the list items. Keys allow React to keep track\r\n              of elements. This way, if an item is updated or removed, only that\r\n              item will be re-rendered instead of the entire list. Keys need to\r\n              be unique to each sibling. But they can be duplicated globally. \r\n            Warning in console like: Each child in an array or iterator should have a unique \"key\" prop\r\n            */}\r\n              {projects.map((project) => (\r\n                <ProjectItem key={project.id} project={project} />\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nDashboard.propTypes = {\r\n  project: PropTypes.object.isRequired,\r\n  getProjects: PropTypes.func.isRequired,\r\n};\r\n\r\n//conventional to name the function mapStateToProps\r\n//this function gets the redux state as param\r\n//and returns an object\r\n//the state from the redux store is mapped to our component, Dashboard's props\r\n// so project is now a prop to Dashboard\r\n//this function is for when you want to access the redux state in your component\r\n//it gets the redux state as a parameter\r\nconst mapStateToProps = (state) => ({\r\n  project: state.project, //from the index.js in /reducers...extracting state as props...gonna get list of projects since the action we are mapping to is getProjectts\r\n});\r\n\r\n//The connect function connects a React component to the redux store\r\nexport default connect(mapStateToProps, { getProjects })(Dashboard); //2\r\n","import axios from \"axios\";\r\n\r\nconst setJWTToken = (token) => {\r\n  if (token) {\r\n    axios.defaults.headers.common[\"Authorization\"] = token;\r\n  } else {\r\n    delete axios.defaults.headers.common[\"Authorization\"];\r\n  }\r\n};\r\n\r\nexport default setJWTToken;\r\n","import axios from \"axios\";\r\nimport { GET_ERRORS, SET_CURRENT_USER } from \"./types\";\r\nimport setJWTToken from \"../securityUtils/setJWTToken\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\nexport const createNewUser = (newUser, history) => async (dispatch) => {\r\n  try {\r\n    await axios.post(\"/api/users/register\", newUser);\r\n    history.push(\"/login\"); //if everything goes well, user is sent to login page\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: {}, //clearing the error payload from previous\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: err.response.data,\r\n    });\r\n  }\r\n};\r\n\r\nexport const login = (LoginRequest) => async (dispatch) => {\r\n  try {\r\n    // post => Login Request\r\n    const res = await axios.post(\"/api/users/login\", LoginRequest);\r\n    // extract token from res.data\r\n    const { token } = res.data;\r\n    // store the token (\"Bearer [token]\") in the localStorage\r\n    localStorage.setItem(\"jwtToken\", token);\r\n    // set our token in header ***\r\n    setJWTToken(token);\r\n    // decode token on React...jwt_decode is a library\r\n    const decoded = jwt_decode(token);\r\n    // dispatch to our securityReducer\r\n    //the decoded token is basically all the claims we put on the backend side...\r\n    dispatch({\r\n      type: SET_CURRENT_USER,\r\n      payload: decoded,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: err.response.data,\r\n    });\r\n  }\r\n};\r\n\r\nexport const logout = () => (dispatch) => {\r\n  localStorage.removeItem(\"jwtToken\");\r\n  setJWTToken(false);\r\n  dispatch({\r\n    type: SET_CURRENT_USER,\r\n    payload: {},\r\n  });\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { logout } from \"../../actions/securityActions\";\r\n\r\n//basically the html/jsx for header/navbar\r\nclass Header extends Component {\r\n  logout() {\r\n    this.props.logout();\r\n    window.location.href = \"/\";\r\n  }\r\n  render() {\r\n    const { validToken, user } = this.props.security;\r\n\r\n    const userIsAuthenticated = (\r\n      <div className=\"collapse navbar-collapse\" id=\"mobile-nav\">\r\n        <ul className=\"navbar-nav mr-auto\">\r\n          <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/dashboard\">\r\n              Dashboard\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n\r\n        <ul className=\"navbar-nav ml-auto\">\r\n          <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/dashboard\">\r\n              <i className=\"fas fa-user-circle mr-1\" />\r\n              {user.fullName}\r\n            </Link>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link\r\n              className=\"nav-link\"\r\n              to=\"/logout\"\r\n              onClick={this.logout.bind(this)}\r\n            >\r\n              Logout\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n\r\n    const userIsNotAuthenticated = (\r\n      <div className=\"collapse navbar-collapse\" id=\"mobile-nav\">\r\n        <ul className=\"navbar-nav ml-auto\">\r\n          <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/register\">\r\n              Sign Up\r\n            </Link>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/login\">\r\n              Login\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n\r\n    let headerLinks;\r\n\r\n    if (validToken && user) {\r\n      headerLinks = userIsAuthenticated;\r\n    } else {\r\n      headerLinks = userIsNotAuthenticated;\r\n    }\r\n    return (\r\n      <div className=\" text-center\">\r\n        <nav\r\n          className=\"navbar navbar-expand-sm navbar-dark mb-4\"\r\n          style={{ backgroundColor: \"#2e003d\" }}\r\n        >\r\n          <div className=\"container\">\r\n            <Link className=\"font-effect-neon navbar-brand\" to=\"/\">\r\n              Personal Project Management Tool\r\n            </Link>\r\n            <button\r\n              className=\"navbar-toggler\"\r\n              type=\"button\"\r\n              data-toggle=\"collapse\"\r\n              data-target=\"#mobile-nav\"\r\n            >\r\n              <span className=\"navbar-toggler-icon\" />\r\n            </button>\r\n            {headerLinks}\r\n          </div>\r\n        </nav>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nHeader.propTypes = {\r\n  logout: PropTypes.func.isRequired,\r\n  security: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  security: state.security,\r\n});\r\n\r\nexport default connect(mapStateToProps, { logout })(Header);\r\n//must export and import components for access\r\n//can import default components with other name whereas with named components\r\n//you have to used the name as when you exported it\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { createProject } from \"../../actions/projectActions\";\r\nimport classnames from \"classnames\";\r\n\r\nclass AddProject extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    //The state object is where you store property values that belongs to the component.\r\n    //When the state object changes, the component re-renders.\r\n    //The state object is initialized in the constructor\r\n    //Refer to the state object anywhere in the component by using the this.state.propertyname syntax\r\n\r\n    this.state = {\r\n      projectName: \"\",\r\n      projectIdentifier: \"\",\r\n      description: \"\",\r\n      startDate: \"\",\r\n      endDate: \"\",\r\n      errors: {},\r\n    };\r\n\r\n    //We bind event handlers in React purely because of the way this keyword works in JS\r\n    //if we dont do this, [this] is undefined\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n  }\r\n\r\n  //life cycle hooks\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.errors) {\r\n      //To change a value in the state object, use the this.setState() method.\r\n      //When a value in the state object changes, the component will re-render,\r\n      // meaning that the output will change according to the new value(s).\r\n      this.setState({ errors: nextProps.errors });\r\n    }\r\n  }\r\n\r\n  /* Just like HTML DOM events, React can perform actions based on user events.\r\n    React has the same events as HTML: click, change, mouseover etc.\r\n\r\n    React events are written in camelCase syntax:\r\n      onClick instead of onclick.\r\n    React event handlers are written inside curly braces:\r\n      onClick={shoot}  instead of onClick=\"shoot()\".\r\n*/\r\n\r\n  //below are objects defined in this class component ...in place of shoot which are called\r\n  // down below on lines like 87 and 87\r\n  //You can control the submit action by adding an event handler \"e\" in the onSubmit/onChange attribute for the <form>\r\n  //Check out React Forms: https://www.w3schools.com/REACT/react_forms.asp\r\n  //e.target.(value) or (name) referring to each input's name and value attribute like on line 107 and 108\r\n\r\n  //event handler for onChange\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  onSubmit(e) {\r\n    e.preventDefault(); //this will prevent the default behavior of form submission (which refreshes/reloads the page causing loss of data) so that we dont lose the data\r\n    const newProject = {\r\n      projectName: this.state.projectName,\r\n      projectIdentifier: this.state.projectIdentifier,\r\n      description: this.state.description,\r\n      startDate: this.state.startDate,\r\n      endDate: this.state.endDate,\r\n    };\r\n    this.props.createProject(newProject, this.props.history);\r\n  }\r\n\r\n  render() {\r\n    const { errors } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        {\r\n          //check name attribute input fields...should be consistent as POJO in backend\r\n          //create constructor\r\n          //initialize state with default (empty) values in constructor\r\n          //set value on input fields to whatever's on component state\r\n          //create onChange function so that when user changes on form, it gets updated to state\r\n          //set onChange on each input field\r\n          //bind at constructor (level) instead of for each input field\r\n          //check state change in the react extension\r\n        }\r\n\r\n        <div className=\"project\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-8 m-auto\">\r\n                <h5 className=\"display-4 text-center\">Create Project form</h5>\r\n                <hr />\r\n                {/* Handling forms is about how you handle the data when it\r\n                changes value or gets submitted. In HTML, form data is usually\r\n                handled by the DOM. In React, form data is usually handled by\r\n                the components. When the data is handled by the components, all\r\n                the data is stored in the component state. You can control\r\n                changes by adding event handlers in the onChange attribute. We\r\n                can use the useState Hook to keep track of each inputs value and\r\n                provide a \"single source of truth\" for the entire application.\r\n                */}\r\n                <form onSubmit={this.onSubmit}>\r\n                  <div className=\"form-group\">\r\n                    <input\r\n                      type=\"text\"\r\n                      //the 2nd param of classnames says apply class \"is-invalid\" whenever/if there are errors in the projectName\r\n                      className={classnames(\r\n                        \"custom_input_border form-control form-control-lg \",\r\n                        {\r\n                          \"is-invalid\": errors.projectName,\r\n                        }\r\n                      )}\r\n                      placeholder=\"Project Name\"\r\n                      name=\"projectName\"\r\n                      value={this.state.projectName}\r\n                      onChange={this.onChange} //we dont want this to be a function call like this.onChange()\r\n                      //we actually want it to be a function (declaration)\r\n                      //event handler should be a FUNCTION not a function call!!\r\n                    />\r\n                    {errors.projectName && (\r\n                      <div className=\"invalid-feedback\">\r\n                        {errors.projectName}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"form-group\">\r\n                    <input\r\n                      type=\"text\"\r\n                      className={classnames(\r\n                        \"custom_input_border form-control form-control-lg \",\r\n                        {\r\n                          \"is-invalid\": errors.projectIdentifier,\r\n                        }\r\n                      )}\r\n                      placeholder=\"Unique Project ID\"\r\n                      name=\"projectIdentifier\"\r\n                      value={this.state.projectIdentifier}\r\n                      onChange={this.onChange}\r\n                    />\r\n                    {errors.projectIdentifier && (\r\n                      <div className=\"invalid-feedback\">\r\n                        {errors.projectIdentifier}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"form-group\">\r\n                    <textarea\r\n                      className={classnames(\r\n                        \"custom_input_border form-control form-control-lg \",\r\n                        {\r\n                          \"is-invalid\": errors.description,\r\n                        }\r\n                      )}\r\n                      placeholder=\"Project Description\"\r\n                      name=\"description\"\r\n                      value={this.state.description}\r\n                      onChange={this.onChange}\r\n                    />\r\n                    {errors.description && (\r\n                      <div className=\"invalid-feedback\">\r\n                        {errors.description}\r\n                      </div>\r\n                    )}{\" \"}\r\n                  </div>\r\n                  <h6>Start Date</h6>\r\n                  <div className=\"form-group\">\r\n                    <input\r\n                      type=\"date\"\r\n                      className=\"custom_input_border form-control form-control-lg\"\r\n                      name=\"startDate\"\r\n                      value={this.state.startDate}\r\n                      onChange={this.onChange}\r\n                    />\r\n                  </div>\r\n                  <h6>Estimated End Date</h6>\r\n                  <div className=\"form-group\">\r\n                    <input\r\n                      type=\"date\"\r\n                      className=\"custom_input_border form-control form-control-lg\"\r\n                      name=\"endDate\"\r\n                      value={this.state.endDate}\r\n                      onChange={this.onChange}\r\n                    />\r\n                  </div>\r\n\r\n                  <input\r\n                    type=\"submit\"\r\n                    className=\"submit_button btn btn-primary btn-block mt-4\"\r\n                  />\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nAddProject.propTypes = {\r\n  createProject: PropTypes.func.isRequired,\r\n  errors: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  errors: state.errors, //athough we have errors in our state, we need to use/extract them as this component's props\r\n});\r\n\r\n//this is how we \"connect\" the component to the state\r\nexport default connect(mapStateToProps, { createProject })(AddProject);\r\n\r\n//GREAT video to understand the basics of form handling:\r\n//https://www.youtube.com/watch?v=7Vo_VCcWupQ&list=PLC3y8-rFHvwgg3vaYJgHGnModB54rxOk3&index=21\r\n","import {\r\n  GET_ERRORS,\r\n  GET_PROJECT_TASK,\r\n  DELETE_PROJECT_TASK,\r\n  GET_BACKLOG,\r\n} from \"../actions/types\";\r\n\r\nconst intialState = {\r\n  project_tasks: [],\r\n  project_task: {},\r\n};\r\n\r\nexport default function (state = intialState, action) {\r\n  switch (action.type) {\r\n    case GET_BACKLOG:\r\n      return {\r\n        ...state,\r\n        project_tasks: action.payload,\r\n      };\r\n    case GET_PROJECT_TASK:\r\n      return {\r\n        ...state,\r\n        project_task: action.payload,\r\n      };\r\n    case DELETE_PROJECT_TASK:\r\n      return {\r\n        ...state,\r\n        //if everything goes well, and API call is a success\r\n        project_tasks: state.project_tasks.filter(\r\n          (project_task) => project_task.projectSequence !== action.payload\r\n        ),\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { GET_ERRORS } from \"../actions/types\";\r\n\r\n//Every reducer needs some initial state\r\nconst initialState = {};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_ERRORS:\r\n      return action.payload;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  DELETE_PROJECT,\r\n  GET_ERRORS,\r\n  GET_PROJECT,\r\n  GET_PROJECTS,\r\n} from \"../actions/types\";\r\n\r\n//by the way...note for self: below initialState is an object\r\n//where projects is an array (of project)\r\n//and project is an object\r\n//...\r\n/*\r\n  Let us assume our application’s state is described by a plain object called initialState which is as follows −\r\n\r\nconst initialState = {\r\n   isLoading: false,\r\n   items: [],\r\n   hasError: false\r\n};\r\nEvery piece of code in your application cannot change this state. To change the state, you need to dispatch an action.\r\n*/\r\n//// Define an initial state value describing/for the app\r\nconst initialState = {\r\n  projects: [],\r\n  project: {},\r\n};\r\n\r\n//A reducer is a central place where state modification takes place.\r\n// Reducer is a function which takes state and action as arguments, and returns a newly updated state.\r\n/*Then, we define a reducer function. The reducer receives two arguments,\r\n the current state and an action object describing what happened. \r\n When the Redux app starts up, we don't have any state yet, so we provide the initialState \r\n as the default value for this reducer: */\r\n//// Create a \"reducer\" function that determines what the new state\r\n// should be when something happens in the app\r\nexport default function (state = initialState, action) {\r\n  // Reducers usually look at the type of action that happened\r\n  // to decide how to update the state\r\n  switch (action.type) {\r\n    case GET_PROJECTS: //4\r\n      return {\r\n        /*Based on the type of the action, we either need to return a brand-new object\r\n         to be the new state result, or return the existing state object if nothing should change.\r\n          Note that we update the state immutably by copying the existing state and updating the copy, \r\n          instead of modifying the original object directly. */\r\n        ...state, //The JavaScript spread operator (...) allows us to quickly copy all or part of an existing array or object into another array or object.\r\n        //An action object can have other fields with additional information about what happened.\r\n        //By convention, we put that information in a field called payload.\r\n        projects: action.payload, //updating the projects field in state as defined in initialState above with new value received\r\n      };\r\n    case GET_PROJECT:\r\n      return {\r\n        ...state,\r\n        project: action.payload,\r\n      };\r\n    case DELETE_PROJECT:\r\n      return {\r\n        ...state, //COPY previous/current state so that we are not mutating state directly\r\n        //update (list of) \"projects\" to include all except the one that has just been deleted\r\n        projects: state.projects.filter(\r\n          (project) => project.projectIdentifier !== action.payload\r\n        ),\r\n      };\r\n    // If the reducer doesn't care about this action type,\r\n    // return the existing state unchanged\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n/* A reducer is a function that receives the current state and an action object,\r\n decides how to update the state if necessary, and returns the new state: (state, action) => newState. \r\n\r\n Reducers act like event listeners, and when they hear an action they are interested in, they update the state in response.\r\n Reducers are pure functions that take the previous state and an action, and return the next state. \r\n\r\n The logic inside reducer functions typically follows the same series of steps:\r\n\r\nCheck to see if the reducer cares about this action ...line 40, 51, 56\r\nIf so, make a copy of the state, update the copy with new values, and return it...line 46/53/58\r\nOtherwise, return the existing state unchanged...line 66\r\n */\r\n","import { SET_CURRENT_USER } from \"../actions/types\";\r\n\r\nconst initialState = {\r\n  validToken: false,\r\n  user: {},\r\n};\r\n\r\nconst booleanActionPayload = (payload) => {\r\n  if (payload) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case SET_CURRENT_USER:\r\n      return {\r\n        ...state,\r\n        validToken: booleanActionPayload(action.payload),\r\n        user: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport backlogReducer from \"./backlogReducer\";\r\nimport errorReducer from \"./errorReducer\";\r\nimport projectReducer from \"./projectReducer\";\r\nimport securityReducer from \"./securityReducer\";\r\n\r\n//root reducer whose only job is to call the other two functions.\r\n/*\r\n*combineReducers accepts an object where the key names will become the keys in your root state object,\r\n and the values are the slice reducer functions that know how to update those slices of the Redux state.\r\n\r\n using combineReducers is what allows us to create one root reducer\r\n */\r\nexport default combineReducers({\r\n  errors: errorReducer,\r\n  // Define a top-level state field named `project`, handled by `projectReducer`\r\n  project: projectReducer,\r\n  backlog: backlogReducer,\r\n  security: securityReducer,\r\n});\r\n","import { createStore, applyMiddleware, compose } from \"redux\"; //importing functions\r\nimport thunk from \"redux-thunk\"; //package that is a standard way to define async action action creators...its a middleware\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst initalState = {};\r\nconst middleware = [thunk]; //thunk is the middleware we would like to apply...other examples including for logging purposes\r\n\r\nlet store;\r\n\r\nconst ReactReduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION__\r\n  ? window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  : (f) => f;\r\n\r\nif (window.navigator.userAgent.includes(\"Chrome\") && ReactReduxDevTools) {\r\n  store = createStore(\r\n    /*\r\n    A Redux app really only has one reducer function: the \"root reducer\" function that you will pass\r\n     to createStore later on. That one root reducer function is responsible for handling all of the\r\n      actions that are dispatched, and calculating what the entire new state result should be every time.\r\n\r\n      The Redux store brings together the state, actions, and reducers that make up your app. \r\n    */\r\n    rootReducer,\r\n    initalState,\r\n    compose(\r\n      /*\r\n      Redux uses a special kind of addon called middleware to let us customize the dispatch function.\r\n      Redux middleware provides a third-party extension point between dispatching an action, and the moment it reaches the reducer.\r\n      */\r\n      applyMiddleware(...middleware),\r\n      //Redux-Devtools provide us debugging platform for Redux apps.\r\n      //It allows us to perform time-travel debugging and live editing.\r\n      ReactReduxDevTools\r\n    )\r\n  );\r\n} else {\r\n  // Create a new Redux store with the `createStore` function,\r\n  // and use the `rootReducer` for the business logic\r\n  store = createStore(\r\n    //1\r\n    rootReducer,\r\n    initalState,\r\n    compose(applyMiddleware(...middleware))\r\n  );\r\n}\r\n\r\nexport default store;\r\n\r\n/* Middleware are the main way to customize the store:\r\nMiddleware are added using the applyMiddleware enhancer\r\nMiddleware are written as three nested functions inside each other\r\nMiddleware run each time an action is dispatched\r\nMiddleware can have side effects inside\r\n*/\r\n","import React, { Component } from \"react\";\r\nimport { getProject, createProject } from \"../../actions/projectActions\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport classnames from \"classnames\";\r\n\r\n//This page renders on when you click on Update Project info\r\n//brought in template code from PPMToolDesign/ProjectForm.html\r\n//provided by Udemy instructor\r\n//changing all occurrences of \"class\" to \"className\" to consist with JSX syntax\r\nclass UpdateProject extends Component {\r\n  constructor() {\r\n    super();\r\n    //below object this.state takes the attributes of a project\r\n    this.state = {\r\n      id: \"\",\r\n      projectName: \"\",\r\n      projectIdentifier: \"\",\r\n      description: \"\",\r\n      startDate: \"\",\r\n      endDate: \"\",\r\n      errors: {},\r\n    };\r\n    this.onChange = this.onChange.bind(this); //best way to bind event handlers (i.e. in constructor)\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    //this is what receives the new props (basically the current state of the project) and displays each input field's value\r\n    if (nextProps.errors) {\r\n      this.setState({ errors: nextProps.errors });\r\n    }\r\n    const {\r\n      id,\r\n      projectName,\r\n      projectIdentifier,\r\n      description,\r\n      startDate,\r\n      endDate,\r\n    } = nextProps.project;\r\n\r\n    //important or else value in each input field will be empty\r\n    this.setState({\r\n      id,\r\n      projectName,\r\n      projectIdentifier,\r\n      description,\r\n      startDate,\r\n      endDate,\r\n    });\r\n  }\r\n\r\n  //once this happens, and state is received by getProject...go to componentWillReceiveProps to set/update state to what it is instead of empty\r\n  componentDidMount() {\r\n    const { id } = this.props.match.params; //match params contain the id that's passed in to the url as Route in App.js\r\n    this.props.getProject(id, this.props.history);\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  onSubmit(e) {\r\n    e.preventDefault();\r\n    const updateProject = {\r\n      id: this.state.id,\r\n      projectName: this.state.projectName,\r\n      projectIdentifier: this.state.projectIdentifier,\r\n      description: this.state.description,\r\n      startDate: this.state.startDate,\r\n      endDate: this.state.endDate,\r\n    };\r\n    this.props.createProject(updateProject, this.props.history);\r\n  }\r\n\r\n  render() {\r\n    const { errors } = this.state;\r\n    return (\r\n      <div className=\"project\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-8 m-auto\">\r\n              <h5 className=\"display-4 text-center\">\r\n                Update Project {this.state.projectIdentifier}\r\n              </h5>\r\n              <hr />\r\n              <form onSubmit={this.onSubmit}>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    type=\"text\"\r\n                    className={classnames(\r\n                      \"custom_input_border form-control form-control-lg \",\r\n                      {\r\n                        \"is-invalid\": errors.projectName,\r\n                      }\r\n                    )}\r\n                    placeholder=\"Project Name\"\r\n                    name=\"projectName\"\r\n                    value={this.state.projectName}\r\n                    onChange={this.onChange}\r\n                  />\r\n                  {errors.projectName && (\r\n                    <div className=\"invalid-feedback\">{errors.projectName}</div>\r\n                  )}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\" form-control form-control-lg\"\r\n                    placeholder=\"Unique Project ID\"\r\n                    name=\"projectIdentifier\"\r\n                    value={this.state.projectIdentifier}\r\n                    onChange={this.onChange}\r\n                    disabled\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <textarea\r\n                    className={classnames(\r\n                      \"custom_input_border form-control form-control-lg \",\r\n                      {\r\n                        \"is-invalid\": errors.description,\r\n                      }\r\n                    )}\r\n                    placeholder=\"Project Description\"\r\n                    name=\"description\"\r\n                    value={this.state.description}\r\n                    onChange={this.onChange}\r\n                  ></textarea>\r\n                  {errors.description && (\r\n                    <div className=\"invalid-feedback\">{errors.description}</div>\r\n                  )}\r\n                </div>\r\n                <h6>Start Date</h6>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    type=\"date\"\r\n                    className=\"custom_input_border form-control form-control-lg\"\r\n                    name=\"startDate\"\r\n                    value={this.state.startDate}\r\n                    onChange={this.onChange}\r\n                  />\r\n                </div>\r\n                <h6>Estimated End Date</h6>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    type=\"date\"\r\n                    className=\"custom_input_border form-control form-control-lg\"\r\n                    name=\"endDate\"\r\n                    value={this.state.endDate}\r\n                    onChange={this.onChange}\r\n                  />\r\n                </div>\r\n\r\n                <input\r\n                  type=\"submit\"\r\n                  className=\"submit_button btn btn-primary btn-block mt-4\"\r\n                />\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nUpdateProject.propTypes = {\r\n  getProject: PropTypes.func.isRequired,\r\n  createProject: PropTypes.func.isRequired,\r\n  project: PropTypes.object.isRequired,\r\n  errors: PropTypes.object.isRequired,\r\n};\r\n\r\n//state.project.project\r\n//fetching from root reducer in index.js\r\n//second project is from projectReducer.js\r\nconst mapStateToProps = (state) => ({\r\n  project: state.project.project,\r\n  errors: state.errors,\r\n});\r\n\r\nexport default connect(mapStateToProps, { getProject, createProject })(\r\n  UpdateProject\r\n);\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { deleteProjectTask } from \"../../../actions/backlogActions\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass ProjectTask extends Component {\r\n  onDeleteClick(backlogId, ptId) {\r\n    this.props.deleteProjectTask(backlogId, ptId);\r\n  }\r\n  render() {\r\n    const { project_task } = this.props;\r\n    let priorityString;\r\n    let priorityClass;\r\n\r\n    if (project_task.priority === 1) {\r\n      priorityClass = \"priorityStyling1 text-light \";\r\n      priorityString = \"HIGH\";\r\n    }\r\n\r\n    if (project_task.priority === 2) {\r\n      priorityClass = \"priorityStyling2 text-light \";\r\n      priorityString = \"MEDIUM\";\r\n    }\r\n\r\n    if (project_task.priority === 3) {\r\n      priorityClass = \"priorityStyling3 text-dark \";\r\n      priorityString = \"LOW\";\r\n    }\r\n\r\n    return (\r\n      <div className=\"card mb-1 bg-light\">\r\n        <div className={`card-header text-primary ${priorityClass}`}>\r\n          ID: {project_task.projectSequence} -- Priority: {priorityString}\r\n        </div>\r\n        <div className=\"card-body bg-light\">\r\n          <h5 className=\"card-title\">{project_task.summary}</h5>\r\n          <p className=\"card-text text-truncate \">\r\n            {project_task.acceptanceCriteria}\r\n          </p>\r\n          <Link\r\n            to={`/updateProjectTask/${project_task.projectIdentifier}/${project_task.projectSequence}`}\r\n            className=\"btn btn-primary\"\r\n          >\r\n            View / Update\r\n          </Link>\r\n\r\n          <button\r\n            className=\"btn btn-danger ml-4\"\r\n            onClick={this.onDeleteClick.bind(\r\n              this,\r\n              project_task.projectIdentifier,\r\n              project_task.projectSequence\r\n            )}\r\n          >\r\n            Delete\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nProjectTask.propTypes = {\r\n  deleteProjectTask: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(null, { deleteProjectTask })(ProjectTask);\r\n","import axios from \"axios\";\r\nimport {\r\n  GET_ERRORS,\r\n  GET_BACKLOG,\r\n  GET_PROJECT_TASK,\r\n  DELETE_PROJECT_TASK,\r\n} from \"./types\";\r\n\r\nexport const addProjectTask =\r\n  (backlogId, project_task, history) => async (dispatch) => {\r\n    try {\r\n      await axios.post(`/api/backlog/${backlogId}`, project_task);\r\n      history.push(`/projectBoard/${backlogId}`);\r\n      //what we are saying is that everything went well...\r\n      //so whatever errors you might have had there from previous attempt (and therefore previous state)\r\n      //you can get rid of those\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        //payload is a conventional name\r\n        payload: {},\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        //payload is a conventional name\r\n        payload: err.response.data,\r\n      });\r\n    }\r\n  };\r\n\r\nexport const getBacklog = (backlogId) => async (dispatch) => {\r\n  try {\r\n    const res = await axios.get(`/api/backlog/${backlogId}`);\r\n    dispatch({\r\n      type: GET_BACKLOG,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: err.response.data,\r\n    });\r\n  }\r\n};\r\n\r\nexport const getProjectTask =\r\n  (backlogId, ptId, history) => async (dispatch) => {\r\n    try {\r\n      const res = await axios.get(`/api/backlog/${backlogId}/${ptId}`);\r\n      dispatch({\r\n        type: GET_PROJECT_TASK,\r\n        payload: res.data,\r\n      });\r\n    } catch (error) {\r\n      history.push(\"/dashboard\");\r\n    }\r\n  };\r\n\r\nexport const updateProjectTask =\r\n  (backlogId, ptId, project_task, history) => async (dispatch) => {\r\n    try {\r\n      await axios.patch(`/api/backlog/${backlogId}/${ptId}`, project_task);\r\n      history.push(`/projectBoard/${backlogId}`);\r\n\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: {}, //clearing out payload\r\n      });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: error.response.data,\r\n      });\r\n    }\r\n  };\r\n\r\nexport const deleteProjectTask = (backlogId, ptId) => async (dispatch) => {\r\n  if (\r\n    window.confirm(\r\n      `You are deleting Project Task ${ptId}, this action cannot be undone. Are you sure you would like to delete this project task?`\r\n    )\r\n  ) {\r\n    await axios.delete(`/api/backlog/${backlogId}/${ptId}`);\r\n    dispatch({\r\n      type: DELETE_PROJECT_TASK,\r\n      payload: ptId,\r\n    });\r\n  }\r\n};\r\n","import React, { Component } from \"react\";\r\nimport ProjectTask from \"./ProjectTasks/ProjectTask\";\r\n\r\nclass Backlog extends Component {\r\n  render() {\r\n    const { project_tasks_prop } = this.props; //Backlog's props received from parent ProjectBoard\r\n    const tasks = project_tasks_prop.map((project_task) => (\r\n      <ProjectTask key={project_task.id} project_task={project_task} />\r\n    ));\r\n\r\n    let todoItems = [];\r\n    let inProgressItems = [];\r\n    let doneItems = [];\r\n\r\n    for (let i = 0; i < tasks.length; i++) {\r\n      // console.log(tasks[i]) ... this is how we know where the status is exactly\r\n      if (tasks[i].props.project_task.status === \"TO_DO\") {\r\n        todoItems.push(tasks[i]);\r\n      } else if (tasks[i].props.project_task.status === \"IN_PROGRESS\") {\r\n        inProgressItems.push(tasks[i]);\r\n      } else if (tasks[i].props.project_task.status === \"DONE\") {\r\n        doneItems.push(tasks[i]);\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-4\">\r\n            <div className=\"card text-center mb-2\">\r\n              <div\r\n                className=\"card-header\"\r\n                style={{\r\n                  backgroundColor: \"#c9c9ac94\",\r\n                  color: \"rgb(46, 0, 61)\",\r\n                }}\r\n              >\r\n                <h3>TO DO</h3>\r\n              </div>\r\n            </div>\r\n            {todoItems}\r\n            {\r\n              //insert tasks here\r\n            }\r\n          </div>\r\n          <div className=\"col-md-4\">\r\n            <div className=\"card text-center mb-2\">\r\n              <div\r\n                className=\"card-header\"\r\n                style={{\r\n                  backgroundColor: \"#c9c9ac94\",\r\n                  color: \"rgb(46, 0, 61)\",\r\n                }}\r\n              >\r\n                <h3>PENDING</h3>\r\n              </div>\r\n            </div>\r\n            {inProgressItems}\r\n          </div>\r\n          <div className=\"col-md-4\">\r\n            <div className=\"card text-center mb-2\">\r\n              <div\r\n                className=\"card-header\"\r\n                style={{\r\n                  backgroundColor: \"#c9c9ac94\",\r\n                  color: \"rgb(46, 0, 61)\",\r\n                }}\r\n              >\r\n                <h3>COMPLETE</h3>\r\n              </div>\r\n            </div>\r\n            {doneItems}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Backlog;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Backlog from \"./Backlog\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { getBacklog } from \"../../actions/backlogActions\";\r\n\r\nclass ProjectBoard extends Component {\r\n  // constructor to handle errors\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      errors: {},\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { id } = this.props.match.params; //extracting the backlogId from Route\r\n    this.props.getBacklog(id);\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.errors) {\r\n      this.setState({ errors: nextProps.errors });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { id } = this.props.match.params; //extracting from the Route url in App.js\r\n    const { project_tasks } = this.props.backlog;\r\n    const { errors } = this.state;\r\n\r\n    let BoardContent;\r\n    const boardAlgorithm = (errors, project_tasks) => {\r\n      if (project_tasks.length < 1) {\r\n        if (errors.projectNotFound) {\r\n          return (\r\n            <div className=\"alert alert-danger text-center\" role=\"alert\">\r\n              {errors.projectNotFound}\r\n            </div>\r\n          );\r\n        } else if (errors.projectIdentifier) {\r\n          return (\r\n            <div className=\"alert alert-danger text-center\" role=\"alert\">\r\n              {errors.projectIdentifier}\r\n            </div>\r\n          );\r\n        } else {\r\n          return (\r\n            <div className=\"alert alert-info text-center\" role=\"alert\">\r\n              No Project Tasks on this Board\r\n            </div>\r\n          );\r\n        }\r\n      } else {\r\n        return <Backlog project_tasks_prop={project_tasks} />;\r\n      }\r\n    };\r\n\r\n    BoardContent = boardAlgorithm(errors, project_tasks);\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <Link to={`/addProjectTask/${id}`} className=\"btn  mb-3\">\r\n          <i\r\n            className=\"btn btn-lg btn-info\"\r\n            style={{\r\n              backgroundColor: \"#dee2e6\",\r\n              color: \"#5a3d75\",\r\n              border: \"#5a3d75\",\r\n              borderStyle: \"solid\",\r\n            }}\r\n          >\r\n            {\" \"}\r\n            Create Project Task{\" \"}\r\n          </i>\r\n        </Link>\r\n        <br />\r\n        <hr />\r\n        {BoardContent}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nProjectBoard.propTypes = {\r\n  backlog: PropTypes.object.isRequired,\r\n  getBacklog: PropTypes.func.isRequired,\r\n  errors: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  backlog: state.backlog,\r\n  errors: state.errors,\r\n});\r\n\r\nexport default connect(mapStateToProps, { getBacklog })(ProjectBoard);\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\"; //so we can connect component to the store/state\r\nimport classnames from \"classnames\";\r\nimport { addProjectTask } from \"../../../actions/backlogActions\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass AddProjectTask extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { id } = this.props.match.params;\r\n\r\n    this.state = {\r\n      summary: \"\",\r\n      acceptanceCriteria: \"\",\r\n      status: \"\",\r\n      priority: 0,\r\n      dueDate: \"\",\r\n      projectIdentifier: id,\r\n      errors: {},\r\n    };\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.errors) {\r\n      this.setState({ errors: nextProps.errors });\r\n    }\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  onSubmit(e) {\r\n    e.preventDefault(); //this will prevent the default behavior of form submission (which refreshes/reloads the page causing loss of data) so that we dont lose the data\r\n\r\n    const newTask = {\r\n      summary: this.state.summary,\r\n      acceptanceCriteria: this.state.acceptanceCriteria,\r\n      status: this.state.status,\r\n      priority: this.state.priority,\r\n      dueDate: this.state.dueDate,\r\n    };\r\n\r\n    this.props.addProjectTask(\r\n      this.state.projectIdentifier,\r\n      newTask,\r\n      this.props.history\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { id } = this.props.match.params; //extracting from the Route url in App.js\r\n    const { errors } = this.state;\r\n    return (\r\n      <div className=\"add-PBI\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-8 m-auto\">\r\n              <Link to={`/projectBoard/${id}`} className=\"btn btn-light\">\r\n                Back to Project Board\r\n              </Link>\r\n              <h4 className=\"display-4 text-center\">Add Project Task</h4>\r\n              <p className=\"lead text-center\">Project Name + Project Code</p>\r\n              <form onSubmit={this.onSubmit}>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    type=\"text\"\r\n                    className={classnames(\r\n                      \"custom_input_border form-control form-control-lg\",\r\n                      {\r\n                        \"is-invalid\": errors.summary,\r\n                      }\r\n                    )}\r\n                    name=\"summary\"\r\n                    placeholder=\"Project Task summary\"\r\n                    value={this.state.summary}\r\n                    onChange={this.onChange}\r\n                  />\r\n                  {errors.summary && (\r\n                    <div className=\"invalid-feedback\">{errors.summary}</div>\r\n                  )}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <textarea\r\n                    className=\"custom_input_border form-control form-control-lg\"\r\n                    placeholder=\"Acceptance Criteria\"\r\n                    name=\"acceptanceCriteria\"\r\n                    value={this.state.acceptanceCriteria}\r\n                    onChange={this.onChange}\r\n                  ></textarea>\r\n                </div>\r\n                <h6>Due Date</h6>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    type=\"date\"\r\n                    className=\"custom_input_border form-control form-control-lg\"\r\n                    name=\"dueDate\"\r\n                    value={this.state.dueDate}\r\n                    onChange={this.onChange}\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <select\r\n                    className=\"custom_input_border form-control form-control-lg\"\r\n                    name=\"priority\"\r\n                    value={this.state.priority}\r\n                    onChange={this.onChange}\r\n                  >\r\n                    <option value={0}>Select Priority</option>\r\n                    <option value={1}>High</option>\r\n                    <option value={2}>Medium</option>\r\n                    <option value={3}>Low</option>\r\n                  </select>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <select\r\n                    className=\"custom_input_border form-control form-control-lg\"\r\n                    name=\"status\"\r\n                    value={this.state.status}\r\n                    onChange={this.onChange}\r\n                  >\r\n                    <option value=\"\">Select Status</option>\r\n                    <option value=\"TO_DO\">TO DO</option>\r\n                    <option value=\"IN_PROGRESS\">IN PROGRESS</option>\r\n                    <option value=\"DONE\">DONE</option>\r\n                  </select>\r\n                </div>\r\n\r\n                <input\r\n                  type=\"submit\"\r\n                  className=\"submit_button btn btn-primary btn-block mt-4\"\r\n                />\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nAddProjectTask.propTypes = {\r\n  addProjectTask: PropTypes.func.isRequired,\r\n  errors: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  errors: state.errors,\r\n});\r\n\r\nexport default connect(mapStateToProps, { addProjectTask })(AddProjectTask);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport classnames from \"classnames\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  getProjectTask,\r\n  updateProjectTask,\r\n} from \"../../../actions/backlogActions\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass UpdateProjectTask extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      id: \"\",\r\n      projectSequence: \"\",\r\n      summary: \"\",\r\n      acceptanceCriteria: \"\",\r\n      status: \"\",\r\n      priority: \"\",\r\n      dueDate: \"\",\r\n      projectIdentifier: \"\",\r\n      createdAt: \"\",\r\n      errors: {},\r\n    };\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { backlogId, ptId } = this.props.match.params;\r\n    this.props.getProjectTask(backlogId, ptId, this.props.history);\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.errors) {\r\n      this.setState({ errors: nextProps.errors });\r\n    }\r\n\r\n    const {\r\n      id,\r\n      projectSequence,\r\n      summary,\r\n      acceptanceCriteria,\r\n      status,\r\n      priority,\r\n      dueDate,\r\n      projectIdentifier,\r\n      createdAt,\r\n    } = nextProps.project_task;\r\n\r\n    this.setState({\r\n      id,\r\n      projectSequence,\r\n      summary,\r\n      acceptanceCriteria,\r\n      status,\r\n      priority,\r\n      dueDate,\r\n      projectIdentifier,\r\n      createdAt,\r\n    });\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  onSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    const updatedProjectTask = {\r\n      id: this.state.id,\r\n      projectSequence: this.state.projectSequence,\r\n      summary: this.state.summary,\r\n      acceptanceCriteria: this.state.acceptanceCriteria,\r\n      status: this.state.status,\r\n      priority: this.state.priority,\r\n      dueDate: this.state.dueDate,\r\n      projectIdentifier: this.state.projectIdentifier,\r\n      createdAt: this.state.createdAt,\r\n    };\r\n\r\n    //console.log(updatedProjectTask);\r\n    this.props.updateProjectTask(\r\n      this.state.projectIdentifier,\r\n      this.state.projectSequence,\r\n      updatedProjectTask,\r\n      this.props.history\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { errors } = this.state;\r\n    return (\r\n      <div className=\"add-PBI\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-8 m-auto\">\r\n              <Link\r\n                to={`/projectBoard/${this.state.projectIdentifier}`}\r\n                className=\"btn btn-light\"\r\n              >\r\n                Back to Project Board\r\n              </Link>\r\n              <h4 className=\"display-4 text-center\">Update Project Task</h4>\r\n              <p\r\n                className=\"lead text-center\"\r\n                style={{\r\n                  color: \"#330059\",\r\n                  fontWeight: \"bold\",\r\n                }}\r\n              >\r\n                Project Name: {this.state.projectIdentifier} | Project Task ID:{\" \"}\r\n                {this.state.projectSequence}\r\n              </p>\r\n              <form onSubmit={this.onSubmit}>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    type=\"text\"\r\n                    className={classnames(\r\n                      \"custom_input_border form-control form-control-lg\",\r\n                      {\r\n                        \"is-invalid\": errors.summary,\r\n                      }\r\n                    )}\r\n                    name=\"summary\"\r\n                    placeholder=\"Project Task summary\"\r\n                    value={this.state.summary}\r\n                    onChange={this.onChange}\r\n                  />\r\n                  {errors.summary && (\r\n                    <div className=\"invalid-feedback\">{errors.summary}</div>\r\n                  )}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <textarea\r\n                    className=\"custom_input_border form-control form-control-lg\"\r\n                    placeholder=\"Acceptance Criteria\"\r\n                    name=\"acceptanceCriteria\"\r\n                    value={this.state.acceptanceCriteria}\r\n                    onChange={this.onChange}\r\n                  ></textarea>\r\n                </div>\r\n                <h6>Due Date</h6>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    type=\"date\"\r\n                    className=\"custom_input_border form-control form-control-lg\"\r\n                    name=\"dueDate\"\r\n                    value={this.state.dueDate}\r\n                    onChange={this.onChange}\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <select\r\n                    className=\"custom_input_border form-control form-control-lg\"\r\n                    name=\"priority\"\r\n                    value={this.state.priority}\r\n                    onChange={this.onChange}\r\n                  >\r\n                    <option value={0}>Select Priority</option>\r\n                    <option value={1}>High</option>\r\n                    <option value={2}>Medium</option>\r\n                    <option value={3}>Low</option>\r\n                  </select>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <select\r\n                    className=\"custom_input_border form-control form-control-lg\"\r\n                    name=\"status\"\r\n                    value={this.state.status}\r\n                    onChange={this.onChange}\r\n                  >\r\n                    <option value=\"\">Select Status</option>\r\n                    <option value=\"TO_DO\">TO DO</option>\r\n                    <option value=\"IN_PROGRESS\">IN PROGRESS</option>\r\n                    <option value=\"DONE\">DONE</option>\r\n                  </select>\r\n                </div>\r\n\r\n                <input\r\n                  type=\"submit\"\r\n                  className=\"submit_button btn btn-block mt-4\"\r\n                />\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nUpdateProjectTask.propTypes = {\r\n  getProjectTask: PropTypes.func.isRequired,\r\n  project_task: PropTypes.object.isRequired,\r\n  updateProjectTask: PropTypes.func.isRequired,\r\n  errors: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  //remember...state is from the store's global state,\r\n  //backlog is from the backlogReducer in index.js, and project_task is in backlogReducer\r\n  project_task: state.backlog.project_task,\r\n  errors: state.errors,\r\n});\r\nexport default connect(mapStateToProps, { getProjectTask, updateProjectTask })(\r\n  UpdateProjectTask\r\n);\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Landing extends Component {\r\n  //if user is logged in, and tries to access Landing, they should immediately be redirected to the Dashboard\r\n  componentDidMount() {\r\n    if (this.props.security.validToken) {\r\n      this.props.history.push(\"/dashboard\");\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"landing\">\r\n        <div className=\"light-overlay landing-inner text-dark\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-12 text-center\">\r\n                <h1 className=\"display-3 mb-4\">\r\n                  Personal Project Management Tool\r\n                </h1>\r\n                <p className=\"lead\">\r\n                  Create your account to join active projects or start your own!\r\n                </p>\r\n                <hr />\r\n                <Link className=\"btn btn-lg btn-primary mr-2\" to=\"/register\">\r\n                  Sign Up\r\n                </Link>\r\n                <Link className=\"btn btn-lg btn-secondary mr-2\" to=\"/login\">\r\n                  Login\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nLanding.propTypes = {\r\n  security: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  security: state.security,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Landing);\r\n","import React, { Component } from \"react\";\r\nimport { createNewUser } from \"../../actions/securityActions\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport classnames from \"classnames\";\r\n\r\nclass Register extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      username: \"\",\r\n      fullName: \"\",\r\n      password: \"\",\r\n      confirmPassword: \"\",\r\n      errors: {},\r\n    };\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n  }\r\n\r\n  //if user is logged in, and tries to access /register, they should immediately be redirected to the Dashboard\r\n  componentDidMount() {\r\n    if (this.props.security.validToken) {\r\n      this.props.history.push(\"/dashboard\");\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.errors) {\r\n      this.setState({ errors: nextProps.errors });\r\n    }\r\n  }\r\n\r\n  onSubmit(e) {\r\n    e.preventDefault();\r\n    const newUser = {\r\n      username: this.state.username,\r\n      fullName: this.state.fullName,\r\n      password: this.state.password,\r\n      confirmPassword: this.state.confirmPassword,\r\n    };\r\n\r\n    this.props.createNewUser(newUser, this.props.history);\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  render() {\r\n    const { errors } = this.state;\r\n    return (\r\n      <div className=\"register\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-8 m-auto\">\r\n              <h1 className=\"display-4 text-center\">Sign Up</h1>\r\n              <p className=\"lead text-center\">Create your Account</p>\r\n              <form onSubmit={this.onSubmit}>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    type=\"text\"\r\n                    className={classnames(\"form-control form-control-lg\", {\r\n                      \"is-invalid\": errors.fullName,\r\n                    })}\r\n                    placeholder=\"Full Name\"\r\n                    name=\"fullName\"\r\n                    value={this.state.fullName}\r\n                    onChange={this.onChange}\r\n                  />\r\n                  {errors.fullName && (\r\n                    <div className=\"invalid-feedback\">{errors.fullName}</div>\r\n                  )}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    type=\"text\"\r\n                    className={classnames(\"form-control form-control-lg\", {\r\n                      \"is-invalid\": errors.username,\r\n                    })}\r\n                    placeholder=\"Email Address (Username)\"\r\n                    name=\"username\"\r\n                    value={this.state.username}\r\n                    onChange={this.onChange}\r\n                  />\r\n                  {errors.username && (\r\n                    <div className=\"invalid-feedback\">{errors.username}</div>\r\n                  )}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    type=\"password\"\r\n                    className={classnames(\"form-control form-control-lg\", {\r\n                      \"is-invalid\": errors.password,\r\n                    })}\r\n                    placeholder=\"Password\"\r\n                    name=\"password\"\r\n                    value={this.state.password}\r\n                    onChange={this.onChange}\r\n                  />\r\n                  {errors.password && (\r\n                    <div className=\"invalid-feedback\">{errors.password}</div>\r\n                  )}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    type=\"password\"\r\n                    className={classnames(\"form-control form-control-lg\", {\r\n                      \"is-invalid\": errors.confirmPassword,\r\n                    })}\r\n                    placeholder=\"Confirm Password\"\r\n                    name=\"confirmPassword\"\r\n                    value={this.state.confirmPassword}\r\n                    onChange={this.onChange}\r\n                  />\r\n                  {errors.confirmPassword && (\r\n                    <div className=\"invalid-feedback\">\r\n                      {errors.confirmPassword}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                <input type=\"submit\" className=\"btn btn-info btn-block mt-4\" />\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nRegister.propTypes = {\r\n  createNewUser: PropTypes.func.isRequired,\r\n  errors: PropTypes.object.isRequired,\r\n  security: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  errors: state.errors,\r\n  security: state.security,\r\n});\r\nexport default connect(mapStateToProps, { createNewUser })(Register);\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport classnames from \"classnames\";\r\nimport { login } from \"../../actions/securityActions\";\r\n\r\nclass Login extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      username: \"\",\r\n      password: \"\",\r\n      errors: {},\r\n    };\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n  }\r\n\r\n  //if user is logged in, and tries to access /login, they should immediately be redirected to the Dashboard\r\n  //no point in trying to login when user is already logged in!\r\n  componentDidMount() {\r\n    if (this.props.security.validToken) {\r\n      this.props.history.push(\"/dashboard\");\r\n    }\r\n  }\r\n\r\n  //when user has logged in, user should always be taken to the Dashboard\r\n  //security is from gloabl redux state as in index.js\r\n  //validToken is from securityReducer state\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.security.validToken) {\r\n      this.props.history.push(\"/dashboard\");\r\n    }\r\n\r\n    if (nextProps.errors) {\r\n      this.setState({ errors: nextProps.errors });\r\n    }\r\n  }\r\n\r\n  onSubmit(e) {\r\n    e.preventDefault();\r\n    const LoginRequest = {\r\n      username: this.state.username,\r\n      password: this.state.password,\r\n    };\r\n\r\n    this.props.login(LoginRequest);\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  render() {\r\n    const { errors } = this.state;\r\n    return (\r\n      <div className=\"login\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-8 m-auto\">\r\n              <h1 className=\"display-4 text-center\">Log In</h1>\r\n              <form onSubmit={this.onSubmit}>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    type=\"text\"\r\n                    className={classnames(\"form-control form-control-lg\", {\r\n                      \"is-invalid\": errors.username,\r\n                    })}\r\n                    placeholder=\"Email Address\"\r\n                    name=\"username\"\r\n                    value={this.state.username}\r\n                    onChange={this.onChange}\r\n                  />\r\n                  {errors.username && (\r\n                    <div className=\"invalid-feedback\">{errors.username}</div>\r\n                  )}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    type=\"password\"\r\n                    className={classnames(\"form-control form-control-lg\", {\r\n                      \"is-invalid\": errors.password,\r\n                    })}\r\n                    placeholder=\"Password\"\r\n                    name=\"password\"\r\n                    value={this.state.password}\r\n                    onChange={this.onChange}\r\n                  />\r\n                  {errors.password && (\r\n                    <div className=\"invalid-feedback\">{errors.password}</div>\r\n                  )}\r\n                </div>\r\n                <input type=\"submit\" className=\"btn btn-info btn-block mt-4\" />\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nLogin.propTypes = {\r\n  login: PropTypes.func.isRequired,\r\n  errors: PropTypes.object.isRequired,\r\n  security: PropTypes.object.isRequired,\r\n  security: PropTypes.object.isRequired,\r\n};\r\n\r\n//global redux state...\r\nconst mapStateToProps = (state) => ({\r\n  security: state.security,\r\n  errors: state.errors,\r\n});\r\n\r\nexport default connect(mapStateToProps, { login })(Login);\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n//SecuredRoute is a functional component\r\n//take all props, render the props only if valid token, if not redirect to login\r\nconst SecuredRoute = ({ component: Component, security, ...otherProps }) => (\r\n  <Route\r\n    {...otherProps}\r\n    render={(props) =>\r\n      security.validToken === true ? (\r\n        <Component {...props} />\r\n      ) : (\r\n        <Redirect to=\"/login\" />\r\n      )\r\n    }\r\n  />\r\n);\r\n\r\nSecuredRoute.propTypes = {\r\n  security: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  security: state.security,\r\n});\r\n\r\nexport default connect(mapStateToProps)(SecuredRoute);\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Dashboard from \"./components/Dashboard\";\r\nimport Header from \"./components/Layout/Header\";\r\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\n//Create React App doesn't include page routing.\r\n//React Router is the most popular solution.\r\n// To add React Router in your application, run this in the terminal from the root directory of the application:\r\n// npm i -D react-router-dom\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport AddProject from \"./components/Project/AddProject\";\r\nimport { Provider } from \"react-redux\"; //allows us to hook up react with redux\r\nimport store from \"./store\";\r\nimport UpdateProject from \"./components/Project/UpdateProject\";\r\nimport ProjectBoard from \"./components/ProjectBoard/ProjectBoard\";\r\nimport AddProjectTask from \"./components/ProjectBoard/ProjectTasks/AddProjectTask\";\r\nimport UpdateProjectTask from \"./components/ProjectBoard/ProjectTasks/UpdateProjectTask\";\r\nimport Landing from \"./components/Layout/Landing\";\r\nimport Register from \"./components/UserManagement/Register\";\r\nimport Login from \"./components/UserManagement/Login\";\r\n\r\nimport jwt_decode from \"jwt-decode\";\r\nimport setJWTToken from \"./securityUtils/setJWTToken\";\r\nimport { SET_CURRENT_USER } from \"./actions/types\";\r\n\r\nimport { logout } from \"./actions/securityActions\";\r\n\r\nimport SecuredRoute from \"./securityUtils/SecureRoute\";\r\n\r\nconst jwtToken = localStorage.jwtToken;\r\n\r\n//if (local storage has token), keep it there as long as its valid\r\nif (jwtToken) {\r\n  setJWTToken(jwtToken); //set it again bcuz whenever we refresh the page the token is going away\r\n  //App.js is the meeting place for all components...every time we load anything from App.js all we're\r\n  //doing is get the jwt from localstorage, check if that token is there, and set it, set it yet again in the header\r\n\r\n  const decoded_jwtToken = jwt_decode(jwtToken);\r\n  store.dispatch({\r\n    type: SET_CURRENT_USER,\r\n    payload: decoded_jwtToken,\r\n  });\r\n\r\n  const currentTime = Date.now() / 1000;\r\n  //if token has expired, automatically logout logic\r\n  if (decoded_jwtToken.exp < currentTime) {\r\n    //handle logout\r\n    store.dispatch(logout());\r\n    window.location.href = \"/\";\r\n  }\r\n}\r\n\r\n//A class component must include the extends React.Component statement.\r\n// This statement creates an inheritance to React.Component, and gives your component access to React.Component's functions.\r\n// The class component also requires a render() method\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      /*\r\n      We have to specifically tell React-Redux what store we want to use in our components.\r\n We do this by rendering a <Provider> component around our entire <App>, and passing the Redux store\r\n  as a prop to <Provider>. After we do this once,\r\n   every component in the application will be able to access the Redux store if needs to.\r\n      */\r\n      <Provider store={store}>\r\n        <Router>\r\n          {\r\n            //enables us to have specific routes...wrap everything of our app in this tag\r\n          }\r\n          <div className=\"App\">\r\n            <Header />\r\n            {\r\n              //Public Routes\r\n            }\r\n            <Route exact path=\"/\" component={Landing} />\r\n            <Route exact path=\"/register\" component={Register} />\r\n            <Route exact path=\"/login\" component={Login} />\r\n            {\r\n              //the component that we wanna bring up when we route to this path\r\n            }\r\n\r\n            {\r\n              //Private Routes\r\n            }\r\n            <Switch>\r\n              <SecuredRoute exact path=\"/dashboard\" component={Dashboard} />\r\n              <SecuredRoute exact path=\"/addProject\" component={AddProject} />\r\n              <SecuredRoute\r\n                exact\r\n                path=\"/updateProject/:id\"\r\n                component={UpdateProject}\r\n              />\r\n              <SecuredRoute\r\n                exact\r\n                path=\"/projectBoard/:id\"\r\n                component={ProjectBoard}\r\n              />\r\n              <SecuredRoute\r\n                exact\r\n                path=\"/addProjectTask/:id\"\r\n                component={AddProjectTask}\r\n              />\r\n              <SecuredRoute\r\n                exact\r\n                path=\"/updateProjectTask/:backlogId/:ptId\"\r\n                component={UpdateProjectTask}\r\n              />\r\n            </Switch>\r\n          </div>\r\n        </Router>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n// When creating a React component, the component's name MUST start with an upper case letter.\n// Display the App component in the \"root\" element:\n\n// ReactDOM.render() takes 2 arguments, HTML code and an HTML element\n// The purpose of the function ReactDOM.render() is to display the specified HTML code\n// (App in this case) inside the specified HTML element (root in this case)\n//But where will it be rendered?\n// In the index.html of the public folder, you'll notice a <div id=\"root\"></div> ...\n// This is where our React application will be rendered\n/*\nThe App component is rendered in a container called root\nex: ReactDOM.render(myElement, document.getElementById('root'));\n\nThe root node is the HTML element where you want to display the result.\n          It is like a container for content managed by React.\n          It does NOT have to be a <div> element and it does NOT have to have the id='root':\n*/\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}